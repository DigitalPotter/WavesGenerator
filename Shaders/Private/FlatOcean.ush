// Creted by Alexander Alikin
// Can be used in any project free of charge,
// can be modified, cannot be resold
// Facebook: https://www.facebook.com/aaalikin/
// Discord: scrappy526

#include "/Shaders/DataTypes.ush"
#include "/Shaders/Utils.ush"

#define GRAVITY 981.f

struct FlatGerstner
{
    float2 GetSingleWaveDirection(float2 InWindDirection, float InSpread, int2 Seed)
    {
        float2 Direction = float2(cos((float) Seed.x / 801571.f), sin((float) Seed.y / 10223.f));
        return normalize(lerp(InWindDirection, (Direction * 2.f) - 1.f, InSpread));
    }
    
    
    FWaveParams GetWaveParams(const int WaveIndex, const FMaterialParams MaterialParams, int2 Seed)
    {
        FWaveParams OutWaveParams = (FWaveParams) 0;

        const float IndexFrac = (float) WaveIndex / (float) MaterialParams._WaveCount;
        
        float2 Direction = GetSingleWaveDirection(MaterialParams._WindDirection, MaterialParams._Spread, Seed);
        
        const float Alpha = pow(IndexFrac, MaterialParams._WaveDistribution);
          
        OutWaveParams.Direction = normalize(lerp(MaterialParams._WindDirection, (Direction * 2.f) - 1.f, MaterialParams._Spread));
        OutWaveParams.Wavelength = lerp(MaterialParams._MinMaxWavelength.y, MaterialParams._MinMaxWavelength.x, Alpha);
        OutWaveParams.Steepness = lerp(MaterialParams._MinMaxSteepness.y, MaterialParams._MinMaxSteepness.x, Alpha);
        OutWaveParams.Amplitude = lerp(MaterialParams._MinMaxAmplitude.y, MaterialParams._MinMaxAmplitude.x, Alpha);
          
        return OutWaveParams;
    }


    WaveOutput GetSingleGerstnerWave(int InWaveCount, FWaveParams InWaveParams, float3 InPositionExcludingOffsets, float InTime)
    {
        WaveOutput OutWave = (WaveOutput) 0;
        
        float Dispersion = 2.f * PI / InWaveParams.Wavelength;
        float2 WaveVector = InWaveParams.Direction * Dispersion;
        float WaveSpeed = sqrt(Dispersion * GRAVITY);
        float WaveTime = WaveSpeed * InTime;
        
        float WavePos = dot(float2(InPositionExcludingOffsets.xy), WaveVector) - WaveTime;
            
        float WaveSin = sin(WavePos);
        float WaveCos = cos(WavePos);
            
        float wKA = InWaveParams.Amplitude * Dispersion;
        float q = InWaveParams.Steepness / wKA;
            
            
        // WPO
        OutWave.WPO.xy = -q * WaveSin * InWaveParams.Direction * InWaveParams.Amplitude;
        OutWave.WPO.z = WaveCos * InWaveParams.Amplitude;
                    
            
        // Normal
        OutWave.Normal.xy = WaveSin * wKA * InWaveParams.Direction;
        OutWave.Normal.z = WaveCos * InWaveParams.Steepness * saturate((InWaveParams.Amplitude * 50.f) / InWaveParams.Wavelength);
        
        // Foam Mask
        OutWave.FoamMask = -WaveSin / InWaveCount;
        return OutWave;
    }

    WaveOutput AddWaves(WaveOutput InWaveToAddTo, const WaveOutput InWaveToAddFrom)
    {
        InWaveToAddTo.WPO += InWaveToAddFrom.WPO;
        InWaveToAddTo.Normal += InWaveToAddFrom.Normal;
        InWaveToAddTo.FoamMask += InWaveToAddFrom.FoamMask;
        
        return InWaveToAddTo;
    }
	
    WaveOutput GetAllGerstnerWaves(const float3 Position, const FMaterialParams MatParams, int2 Seed)
    {
        WaveOutput CurrentWave = (WaveOutput) 0;
        WaveOutput OutWaves = (WaveOutput) 0;
        
        for (int WaveIndex = 0; WaveIndex < MatParams._WaveCount; WaveIndex++)
        {
            Seed = FMath::GetRandomInt2(Seed);
            FWaveParams WaveParams = GetWaveParams(WaveIndex, MatParams, Seed);
            
            CurrentWave = GetSingleGerstnerWave(MatParams._WaveCount, WaveParams, Position, MatParams._Time * MatParams._Speed);
            OutWaves = AddWaves(OutWaves, CurrentWave);
        }
        return OutWaves;
    }
    
    float3 FinalizeNormal(float3 inNormal)
    {
        return normalize(float3(inNormal.xy, 1.0f - inNormal.z));
    }
    
    float FinalizeFoamMask(float InFoamMask, float InFoamStrength)
    {
        InFoamMask = saturate(InFoamMask);
        InFoamStrength = saturate(1 - (InFoamStrength * 0.5 + 0.5));
        
        float Min = 0.f;
        Min += InFoamStrength;
        
        float Max = 1.f;
        Max -= InFoamStrength;
        
        return smoothstep(Min, Max, InFoamMask);
    }
    
    FMaterialParams CreateMaterialParameters(
    int WaveCount,
    float2 MinMaxWavelength,
    float2 MinMaxSteepness,
    float2 MinMaxAmplitude,
    float2 WindDirection,
    float Spread,
    float WaveDistribution,
    float3 PositionExcludingOffsets,
    float3 ObjectPositionWS,
    float Speed,
    float Time,
    float FoamStrength)
    {
        FMaterialParams OutParams = (FMaterialParams) 0;
        
        OutParams._WaveCount = WaveCount;
        OutParams._MinMaxWavelength = MinMaxWavelength;
        OutParams._MinMaxSteepness = MinMaxSteepness;
        OutParams._MinMaxAmplitude = MinMaxAmplitude;
        OutParams._WindDirection = WindDirection;
        OutParams._Spread = Spread;
        OutParams._WaveDistribution = WaveDistribution;
        OutParams._PositionExcludingOffsets = PositionExcludingOffsets;
        OutParams._ObjectPositionWS = ObjectPositionWS;
        OutParams._Speed = Speed;
        OutParams._Time = Time;
        OutParams._FoamStrength = FoamStrength;
        
        return OutParams;
    }
    
    
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////// 
    // Based on Unreal's Gerstner function from Water Plugin. Gerstner waves for flat plane
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    
    WaveOutput CalculateGerstnerWaves(
    FMaterialParams MatParams,
    out float3 TriplanarMask)
    {
        // Arbitrary start numbers
        int2 Seed = int2(10007, 802709);
        
        WaveOutput OutWaves = GetAllGerstnerWaves(MatParams._PositionExcludingOffsets, MatParams, Seed);
        
        OutWaves.Normal = FinalizeNormal(OutWaves.Normal);
        OutWaves.FoamMask = FinalizeFoamMask(OutWaves.FoamMask, MatParams._FoamStrength);
        return OutWaves;
    }

};
/////////////////////////////////////////////////////////////////////////////////
/////// Main function ///////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

FlatGerstner Waves;


FMaterialParams MatParams = Waves.CreateMaterialParameters(
WaveCount,
float2(MinWavelength, MaxWavelength),
float2(MinSteepness, MaxSteepness),
float2(MinAmplitude, MaxAmplitude),
WindDirection,
Spread,
WaveDistribution,
PositionExcludingOffsets,
ObjectPositionWS,
Speed,
Time,
FoamStrength);

WaveOutput FinalWaves = Waves.CalculateGerstnerWaves(
    MatParams,
    TriplanarMask);

Normal = FinalWaves.Normal;
FoamMask = FinalWaves.FoamMask;

return FinalWaves.WPO;

////////////////////////////////////////////////////////////////////////////////////////
/////// End of Main function ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////